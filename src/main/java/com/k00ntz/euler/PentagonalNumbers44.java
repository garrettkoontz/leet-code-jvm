package com.k00ntz.euler;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
 * <p>
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 * <p>
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
 * <p>
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj|
 * is minimised; what is the value of D?
 */
public class PentagonalNumbers44 {

    public static List<Long> pentagonalList = IntStream.range(1, 5000)
            .mapToLong(PentagonalNumbers44::pentagonal).boxed().collect(Collectors.toList());
    public static Set<Long> pentagonalsSet = new HashSet<>(pentagonalList);

    public static long pentagonal(long n) {
        return n * (3 * n - 1) / 2;
    }

    public static boolean isSumAndDiffPentagonal(long p1, long p2) {
        return pentagonalsSet.contains(p1 - p2) && pentagonalsSet.contains(p1 + p2);
    }

    public static long findMinimalPentagonalSumAndDiff() {
        for (int dist = 1; dist < pentagonalList.size(); dist++) {
            for (int i = 0; i < pentagonalList.size() - dist; i++) {
                if (isSumAndDiffPentagonal(pentagonalList.get(i + dist), pentagonalList.get(i)))
                    return pentagonalList.get(i + dist) - pentagonalList.get(i);
            }
        }
        return -1L;
    }

    public static void main(String[] args) {
        System.out.println(isSumAndDiffPentagonal(70, 22));
        System.out.println(findMinimalPentagonalSumAndDiff());
    }
}
