package com.k00ntz.euler.onethroughfifty;

import com.k00ntz.euler.util.Primes;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * <p>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p>
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class HighlyDivisibleTriangleNumber12 {

    public static class TriangleNumberIterator implements Iterator<Long> {

        private int index = 0;
        private long number = 0L;

        @Override
        public boolean hasNext() {
            return true;
        }

        @Override
        public Long next() {
            number += ++index;
            return number;
        }
    }

    public static int countDivisors(long l) {
        Map<Integer, List<Integer>> factorMap = Primes.primeFactorsMap(l);
        return factorMap.values().stream().mapToInt(a -> a.size() + 1).reduce((a, b) -> a * b).orElse(0);
    }

    public static long firstTriangleNumberWithMoreThanNumDivisors(int n) {
        if (n <= 0) throw new RuntimeException("Can't have negative or no divisors");
        TriangleNumberIterator iterator = new TriangleNumberIterator();
        long triangleNumber = iterator.next();
        while (countDivisors(triangleNumber) <= n)
            triangleNumber = iterator.next();
        return triangleNumber;

    }

    public static void main(String[] args) {
        System.out.println(firstTriangleNumberWithMoreThanNumDivisors(5));
        System.out.println(firstTriangleNumberWithMoreThanNumDivisors(500));
    }
}
